# Problem Solving approach
 
### 1. understanding the problem
 
- restate the problem in own words
- what are the input and outputs
- Is there enough information to solve the problem
- Thinking of labelling data (don't use random label like i, j, k, a, b)
- checking the example with invalid, empty input
 
### 2.Note own the details like input, output
 
### 3. Start with the naive/brute force approach. First thing that comes into mind. It shows that youâ€™re able to think well and critically (you don't need to write this code, just speak about it).
 
### 4. Tell them why this approach is not the best (i.e. O(n^2) or higher, not readable, etc...)
 
### 5. Walk through your approach, comment things and see where you may be able to break things.
 
### 6. Before you start coding, walk through your code and write down the steps you are going to follow
 
### 7. breakdown the steps and commenting is the ultimate key,Rundown of thinking process, steps. Breaking down the code will you give you the extra advantage
 
### 8.start coding (simplify as necessary)
 
### 9. can you write it better in terms of readability, time, space complexity?
 
### 10. If your interviewer is happy with the solution, the interview usually ends here. It is also Common that the interviewer asks you extension questions
 
 